# 指定运行Nginx的用户，通常为nginx用户以提高安全性
user nginx;
# 设置工作进程数为自动，根据CPU核心数自动调整，提高性能
worker_processes auto;
# 定义错误日志的存储路径和日志级别，便于排查问题
error_log /var/log/nginx/error.log warn;
# 指定Nginx进程ID文件的存储路径
pid /run/nginx.pid;

# 事件模块配置
events {
    # 使用epoll事件驱动模型，提高Linux系统下的性能
    use epoll;
    # 设置每个工作进程的最大并发连接数，优化连接处理能力
    worker_connections 2048;
    # 允许一个工作进程同时接受多个连接请求，提高并发处理能力
    multi_accept on;
}

# HTTP模块配置
http {
    # 包含MIME类型定义文件，确保文件类型正确识别
    include /etc/nginx/mime.types;
    # 设置默认的MIME类型，防止未识别文件类型的错误
    default_type application/octet-stream;

    # 定义访问日志的格式，便于分析请求信息
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # 指定访问日志的存储路径和缓冲区大小，优化日志写入性能
    access_log /var/log/nginx/access.log main buffer=16k;

    # 启用高效文件传输模式，减少CPU负载
    sendfile on;
    # 优化TCP传输，减少网络延迟
    tcp_nopush on;
    # 启用TCP_NODELAY选项，禁用Nagle算法，减少小数据包的延迟
    tcp_nodelay on;

    # 优化客户端连接的保持时间和请求数，提升用户体验
    keepalive_timeout 65;
    keepalive_requests 100;
    # 限制客户端请求体的最大大小，防止恶意请求
    client_max_body_size 10m;
    # 设置客户端请求体缓冲区大小，优化内存使用
    client_body_buffer_size 128k;

    # 设置哈希表大小，优化域名解析性能
    types_hash_max_size 2048;
    # 设置服务器名称哈希桶大小，优化服务器名称解析性能
    server_names_hash_bucket_size 64;

    # 启用gzip压缩，减少传输数据量，提高加载速度
    gzip on;
    # 设置启用gzip压缩的最小文件长度，单位为字节，1k表示1KB
    gzip_min_length 1k;
    # 设置gzip压缩的压缩级别，范围是1-9，6表示中等压缩率
    gzip_comp_level 6;
    # 指定需要进行gzip压缩的MIME类型，确保常见的文本和数据文件都能被压缩
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    # 启用gzip压缩的Vary头，确保代理服务器正确处理不同的Accept-Encoding头
    gzip_vary on;

    # 负载均衡配置
    upstream backend_servers {
        # 三个服务器的IP地址和端口号，权重和最大失败次数
        server 192.168.6.100:9001 weight=3 max_fails=3 fail_timeout=30s;
        server 192.168.6.101:9001 weight=2 max_fails=3 fail_timeout=30s;
        server 192.168.6.102:9001 weight=1 max_fails=3 fail_timeout=30s;
    }

    # 限流配置
    limit_req_zone $binary_remote_addr zone=mylimit:10m rate=10r/s;

    # 服务器配置
    server {
        # 配置监听端口，支持IPv4和IPv6，设置为默认服务器
        listen 7000 default_server;
        # 监听IPv6地址的7000端口，并设置为默认服务器
        listen [::]:7000 default_server;
        # 设置服务器名称为通配符，匹配所有请求
        server_name _;

        # 反向代理配置，转发请求到uwsgi服务
        location / {
            # 将请求转发到uwsgi服务，指定服务的IP地址和端口号
            uwsgi_pass 192.168.6.100:9001;
            # 包含uwsgi参数配置文件，确保请求的正确处理
            include uwsgi_params;

            # 设置uwsgi连接和读取超时时间，防止长时间等待
            uwsgi_connect_timeout 30s;
            # 设置uwsgi读取超时时间为30秒，防止长时间等待
            uwsgi_read_timeout 30s;
            # 设置uwsgi发送超时时间为30秒，防止长时间等待
            uwsgi_send_timeout 30s;

            # 配置代理缓冲区大小，优化数据传输
            uwsgi_buffer_size 32k;
            # 配置uwsgi缓冲区数量和大小，优化数据传输性能
            uwsgi_buffers 8 32k;

            # 设置代理请求头，确保客户端信息的正确传递
            proxy_set_header X-Real-IP $remote_addr;
            # 设置代理请求头，确保客户端的真实IP地址能够被传递
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 设置代理请求头，确保请求的主机名能够被传递
            proxy_set_header Host $host;
        }

        # 这里和上面的，用一个就行了，使用一种方式即可
        # 使用负载均衡的时候，需要在location块中配置proxy_pass指令，使用下面的配置
        location / {
            # 配置代理，将请求转发到后端服务器组
            proxy_pass http://backend_servers;
            # 使用HTTP/1.1协议进行代理
            proxy_http_version 1.1;
            # 优化连接头设置，保持长连接
            proxy_set_header Connection "keep-alive";
            # 设置代理请求头，确保请求的主机名能够被传递
            proxy_set_header Host $host;
            # 设置代理请求头，确保客户端的真实IP地址能够被传递
            proxy_set_header X-Real-IP $remote_addr;
            # 设置代理请求头，确保客户端的真实IP地址能够被传递
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            # 设置代理请求头，确保请求的协议能够被传递
            proxy_set_header X-Forwarded-Proto $scheme;
            # 增加超时设置，优化请求处理
            # 设置代理连接超时时间为30秒，防止长时间等待
            proxy_connect_timeout 30s;
            # 设置代理读取超时时间为30秒，防止长时间等待
            proxy_read_timeout 30s;
            # 设置代理发送超时时间为30秒，防止长时间等待
            proxy_send_timeout 30s;

            # 应用限流配置
            limit_req zone=mylimit burst=20 nodelay;
        }

        # 配置错误页面，提供用户友好的错误提示
        error_page 404 /404.html;
        # 配置500、502、503和504错误页面，提供用户友好的错误提示
        error_page 500 502 503 504 /50x.html;

        # 配置404错误页面的location块
        location = /404.html {
            # 设置404错误页面的根目录
            root /usr/share/nginx/html;
            # 将该location块设置为内部使用，防止外部访问
            internal;
        }

        # 配置50x错误页面的location块
        location = /50x.html {
            # 设置50x错误页面的根目录
            root /usr/share/nginx/html;
            # 将该location块设置为内部使用，防止外部访问
            internal;
        }
    }
}
